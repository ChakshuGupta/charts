#
# Copyright (C) 2019 The Falco Authors.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

####################
# Your custom rules!
####################

# Add new rules, like this one
# - rule: The program "sudo" is run in a container
#   desc: An event will trigger every time you run sudo in a container
#   condition: evt.type = execve and evt.dir=< and container.id != host and proc.name = sudo
#   output: "Sudo run in container (user=%user.name %container.info parent=%proc.pname cmdline=%proc.cmdline)"
#   priority: ERROR
#   tags: [users, container]

# Or override/append to any rule, macro, or list from the Default Rules
- rule: Inbound SSH Connection
  desc: Detect Inbound SSH Connection
  condition: >
    ((evt.type in (accept,listen) and evt.dir=<) or
      (evt.type in (recvfrom,recvmsg))) and ssh_port
  output: >
    Inbound SSH connection (user=%user.name client_ip=%fd.cip client_port=%fd.cport server_ip=%fd.sip)
  priority: WARNING
  tags: [network]
- rule: Outbound SSH Connection
  desc: Detect Outbound SSH Connection
  condition: >
    ((evt.type = connect and evt.dir=<) or
      (evt.type in (sendto,sendmsg))) and ssh_port
  output: >
    Outbound SSH connection (user=%user.name server_ip=%fd.sip server_port=%fd.sport client_ip=%fd.cip)
  priority: WARNING
  tags: [network]

### CVE-2019-5736

- list: docker_binaries
  items: [dockerd, containerd-shim, "runc:[1:CHILD]"]

- macro: docker_procs
  condition: proc.name in (docker_binaries)

- rule: Modify container entrypoint (CVE-2019-5736)
  desc: Detect file write activities on container entrypoint symlink (/proc/self/exe)
  condition: >
    open_write and (fd.name=/proc/self/exe or fd.name startswith /proc/self/fd/) and not docker_procs and container
  output: >
    %fd.name is open to write by process (%proc.name, %proc.exeline)
  priority: WARNING


### Kubernetes Falco Rules

- macro: kube_apiserver_consider_syscalls
  condition: (evt.num < 0)

# These policies are limited to containers, specifically those where
# the container image name starts with "kube_apiserver"
- macro: app_kube_apiserver
  condition: container and container.image contains "kube-apiserver"

# Not considering all inbound networking suspect

# Not considering all outbound networking suspect

# Restricting listening ports to selected set

- list: kube_apiserver_allowed_inbound_ports_tcp
  items: [6443]

- rule: Unexpected inbound tcp connection kube_apiserver
  desc: Detect inbound traffic to kube_apiserver using tcp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_apiserver_allowed_inbound_ports_tcp) and app_kube_apiserver
  output: Inbound network connection to kube_apiserver on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting spawned processes to selected set

- list: kube_apiserver_allowed_processes
  items: ["kube-apiserver"]

- rule: Unexpected spawned process kube_apiserver
  desc: Detect a process started in a kube_apiserver container outside of an expected set
  condition: spawned_process and not proc.name in (kube_apiserver_allowed_processes) and app_kube_apiserver
  output: Unexpected process spawned in kube_apiserver container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting files read or written to specific set

# Restricting syscalls to selected set

- list: kube_apiserver_allowed_syscalls
  items: [accept, connect, socket]

- rule: Unexpected syscall kube_apiserver
  desc: Detect a syscall in a kube_apiserver container outside of an expected set
  condition: kube_apiserver_consider_syscalls and not evt.type in ("<unknown>", kube_apiserver_allowed_syscalls) and app_kube_apiserver
  output: Unexpected syscall in kube_apiserver container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)
  priority: WARNING
  warn_evttypes: False

#
# Auto-generated set of falco rules for kube_controller containers
# Generated at 2018-05-23 09:58:49 UTC
#

# By default, the autogenerated rules include rules that attempt to
# restrict the set of system calls that can be performed by
# applications. However, we know that these rules are fairly FP-prone,
# so they are disabled by default. If you'd like to enable them,
# either change or override this macro's condition to "evt.num >= 0".
- macro: kube_controller_consider_syscalls
  condition: (evt.num < 0)

# These policies are limited to containers, specifically those where
# the container image name starts with "kube_controller"
- macro: app_kube_controller
  condition: container and container.image contains "kube-controller"

# Not considering all inbound networking suspect

# Not considering all outbound networking suspect

# Restricting listening ports to selected set

- list: kube_controller_allowed_inbound_ports_tcp
  items: [10252]

- rule: Unexpected inbound tcp connection kube_controller
  desc: Detect inbound traffic to kube_controller using tcp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_controller_allowed_inbound_ports_tcp) and app_kube_controller
  output: Inbound network connection to kube_controller on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting spawned processes to selected set

- list: kube_controller_allowed_processes
  items: ["kube-controller-manager"]

- rule: Unexpected spawned process kube_controller
  desc: Detect a process started in a kube_controller container outside of an expected set
  condition: spawned_process and not proc.name in (kube_controller_allowed_processes) and app_kube_controller
  output: Unexpected process spawned in kube_controller container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting files read or written to specific set

#
# Auto-generated set of falco rules for kube_dashboard containers
# Generated at 2018-05-23 09:58:49 UTC
#

# By default, the autogenerated rules include rules that attempt to
# restrict the set of system calls that can be performed by
# applications. However, we know that these rules are fairly FP-prone,
# so they are disabled by default. If you'd like to enable them,
# either change or override this macro's condition to "evt.num >= 0".
- macro: kube_dashboard_consider_syscalls
  condition: (evt.num < 0)

# These policies are limited to containers, specifically those where
# the container image name starts with "kube_dashboard"
- macro: app_kube_dashboard
  condition: container and container.image contains "kube-dashboard"

# Not considering all inbound networking suspect

# Not considering all outbound networking suspect

# Restricting listening ports to selected set

- list: kube_dashboard_allowed_inbound_ports_tcp
  items: [8443]

- rule: Unexpected inbound tcp connection kube_dashboard
  desc: Detect inbound traffic to kube_dashboard using tcp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_dashboard_allowed_inbound_ports_tcp) and app_kube_dashboard
  output: Inbound network connection to kube_dashboard on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting spawned processes to selected set

- list: kube_dashboard_allowed_processes
  items: ["/dashboard"]

- rule: Unexpected spawned process kube_dashboard
  desc: Detect a process started in a kube_dashboard container outside of an expected set
  condition: spawned_process and not proc.name in (kube_dashboard_allowed_processes) and app_kube_dashboard
  output: Unexpected process spawned in kube_dashboard container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting files read or written to specific set

- list: kube_dashboard_allowed_file_prefixes_readonly
  items: ["/public"]

- rule: Unexpected file access readonly for kube_dashboard
  desc: Detect an attempt to access a file readonly other than below an expected list of directories
  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (kube_dashboard_allowed_file_prefixes_readonly) and app_kube_dashboard
  output: Unexpected file accessed readonly for kube_dashboard (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
  priority: WARNING

#
# Auto-generated set of falco rules for kube_dns containers
# Generated at 2018-05-23 08:29:54 UTC
#

# By default, the autogenerated rules include rules that attempt to
# restrict the set of system calls that can be performed by
# applications. However, we know that these rules are fairly FP-prone,
# so they are disabled by default. If you'd like to enable them,
# either change or override this macro's condition to "evt.num >= 0".
- macro: kube_dns_consider_syscalls
  condition: (evt.num < 0)

# These policies are limited to containers, specifically those where
# the container image name starts with "kube_dns"
- macro: app_kube_dns
  condition: container and container.image contains "kube-dns"

# Not considering all inbound networking suspect

# Not considering all outbound networking suspect

# Restricting listening ports to selected set

- list: kube_dns_allowed_inbound_ports_tcp
  items: [10053, 10055, 8081]

- rule: Unexpected inbound tcp connection kube_dns
  desc: Detect inbound traffic to kube_dns using tcp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_dns_allowed_inbound_ports_tcp) and app_kube_dns
  output: Inbound network connection to kube_dns on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting spawned processes to selected set

- list: kube_dns_allowed_processes
  items: ["/kube-dns"]

- rule: Unexpected spawned process kube_dns
  desc: Detect a process started in a kube_dns container outside of an expected set
  condition: spawned_process and not proc.name in (kube_dns_allowed_processes) and app_kube_dns
  output: Unexpected process spawned in kube_dns container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: WARNING

#
# Auto-generated set of falco rules for kube_scheduler containers
# Generated at 2018-05-23 09:58:49 UTC
#

# By default, the autogenerated rules include rules that attempt to
# restrict the set of system calls that can be performed by
# applications. However, we know that these rules are fairly FP-prone,
# so they are disabled by default. If you'd like to enable them,
# either change or override this macro's condition to "evt.num >= 0".
- macro: kube_scheduler_consider_syscalls
  condition: (evt.num < 0)

# These policies are limited to containers, specifically those where
# the container image name starts with "kube_scheduler"
- macro: app_kube_scheduler
  condition: container and container.image contains "kube-scheduler"

# Not considering all inbound networking suspect

# Not considering all outbound networking suspect

# Restricting listening ports to selected set

- list: kube_scheduler_allowed_inbound_ports_tcp
  items: [10251]

- rule: Unexpected inbound tcp connection kube_scheduler
  desc: Detect inbound traffic to kube_scheduler using tcp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_scheduler_allowed_inbound_ports_tcp) and app_kube_scheduler
  output: Inbound network connection to kube_scheduler on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting spawned processes to selected set

- list: kube_scheduler_allowed_processes
  items: ["kube-scheduler"]

- rule: Unexpected spawned process kube_scheduler
  desc: Detect a process started in a kube_scheduler container outside of an expected set
  condition: spawned_process and not proc.name in (kube_scheduler_allowed_processes) and app_kube_scheduler
  output: Unexpected process spawned in kube_scheduler container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting files read or written to specific set

# Restricting syscalls to selected set

- list: kube_scheduler_allowed_syscalls
  items: [accept]

- rule: Unexpected syscall kube_scheduler
  desc: Detect a syscall in a kube_scheduler container outside of an expected set
  condition: kube_scheduler_consider_syscalls and not evt.type in ("<unknown>", kube_scheduler_allowed_syscalls) and app_kube_scheduler
  output: Unexpected syscall in kube_scheduler container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)
  priority: WARNING
  warn_evttypes: False

- macro: defaultbackend_consider_syscalls
  condition: (evt.num < 0)

# These policies are limited to containers, specifically those where
# the container image name starts with "defaultbackend"
- macro: app_defaultbackend
  condition: container and container.image contains "defaultbackend"

# Not considering all inbound networking suspect

# Not considering all outbound networking suspect

# Restricting listening ports to selected set

- list: defaultbackend_allowed_inbound_ports_tcp
  items: [8080]

- rule: Unexpected inbound tcp connection defaultbackend
  desc: Detect inbound traffic to defaultbackend using tcp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (defaultbackend_allowed_inbound_ports_tcp) and app_defaultbackend
  output: Inbound network connection to defaultbackend on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting spawned processes to selected set

- list: defaultbackend_allowed_processes
  items: ["/server"]

- rule: Unexpected spawned process defaultbackend
  desc: Detect a process started in a defaultbackend container outside of an expected set
  condition: spawned_process and not proc.name in (defaultbackend_allowed_processes) and app_defaultbackend
  output: Unexpected process spawned in defaultbackend container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting files read or written to specific set

# Restricting syscalls to selected set

- list: defaultbackend_allowed_syscalls
  items: [accept]

- rule: Unexpected syscall defaultbackend
  desc: Detect a syscall in a defaultbackend container outside of an expected set
  condition: defaultbackend_consider_syscalls and not evt.type in ("<unknown>", defaultbackend_allowed_syscalls) and app_defaultbackend
  output: Unexpected syscall in defaultbackend container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)
  priority: WARNING
  warn_evttypes: False

#
# Auto-generated set of falco rules for event_exporter containers
# Generated at 2018-05-23 15:00:05 UTC
#

# By default, the autogenerated rules include rules that attempt to
# restrict the set of system calls that can be performed by
# applications. However, we know that these rules are fairly FP-prone,
# so they are disabled by default. If you'd like to enable them,
# either change or override this macro's condition to "evt.num >= 0".
- macro: event_exporter_consider_syscalls
  condition: (evt.num < 0)

# These policies are limited to containers, specifically those where
# the container image name starts with "event_exporter"
- macro: app_event_exporter
  condition: container and container.image startswith "event_exporter"

# Not considering all inbound networking suspect

# Not considering all outbound networking suspect

# Restricting listening ports to selected set

- list: event_exporter_allowed_inbound_ports_tcp
  items: [80]

- rule: Unexpected inbound tcp connection event_exporter
  desc: Detect inbound traffic to event_exporter using tcp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (event_exporter_allowed_inbound_ports_tcp) and app_event_exporter
  output: Inbound network connection to event_exporter on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting spawned processes to selected set

- list: event_exporter_allowed_processes
  items: ["/event-exporter"]

- rule: Unexpected spawned process event_exporter
  desc: Detect a process started in a event_exporter container outside of an expected set
  condition: spawned_process and not proc.name in (event_exporter_allowed_processes) and app_event_exporter
  output: Unexpected process spawned in event_exporter container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting files read or written to specific set

- list: event_exporter_allowed_file_prefixes_readonly
  items: ["/proc"]

- rule: Unexpected file access readonly for event_exporter
  desc: Detect an attempt to access a file readonly other than below an expected list of directories
  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (event_exporter_allowed_file_prefixes_readonly) and app_event_exporter
  output: Unexpected file accessed readonly for event_exporter (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
  priority: WARNING

#
# Auto-generated set of falco rules for hyperkube containers
# Generated at 2018-05-10 04:57:50 UTC
#

# By default, the autogenerated rules include rules that attempt to
# restrict the set of system calls that can be performed by
# applications. However, we know that these rules are fairly FP-prone,
# so they are disabled by default. If you'd like to enable them,
# either change or override this macro's condition to "evt.num >= 0".
- macro: hyperkube_consider_syscalls
  condition: (evt.num < 0)

# These policies are limited to containers, specifically those where
# the container image name starts with "hyperkube"
- macro: app_hyperkube
  condition: container and container.image contains "hyperkube"

# Not considering all inbound networking suspect

# Not considering all outbound networking suspect

# Restricting listening ports to selected set

- list: hyperkube_allowed_inbound_ports_tcp
  items: [10248, 10249, 10250, 10255, 4194, 443, 8080]

- rule: Unexpected inbound tcp connection hyperkube
  desc: Detect inbound traffic to hyperkube using tcp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (hyperkube_allowed_inbound_ports_tcp) and app_hyperkube
  output: Inbound network connection to hyperkube on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting spawned processes to selected set

- list: hyperkube_allowed_processes
  items: ["/bin/bash", "/bin/findmnt", "/hyperkube", "findmnt", "iptables", "iptables-restor", "iptables-restore", "iptables-save", "journalctl", "nsenter", "sleep"]

- rule: Unexpected spawned process hyperkube
  desc: Detect a process started in a hyperkube container outside of an expected set
  condition: spawned_process and not proc.name in (hyperkube_allowed_processes) and app_hyperkube
  output: Unexpected process spawned in hyperkube container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting files read or written to specific set

- list: hyperkube_allowed_file_prefixes_readonly
  items: ["/"]

- rule: Unexpected file access readonly for hyperkube
  desc: Detect an attempt to access a file readonly other than below an expected list of directories
  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (hyperkube_allowed_file_prefixes_readonly) and app_hyperkube
  output: Unexpected file accessed readonly for hyperkube (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
  priority: WARNING

- list: hyperkube_allowed_file_prefixes_readwrite
  items: ["/dev", "/proc", "/var/lib/kubelet/pods"]

- rule: Unexpected file access readwrite for hyperkube
  desc: Detect an attempt to access a file readwrite other than below an expected list of directories
  condition: (open_write) and not fd.name pmatch (hyperkube_allowed_file_prefixes_readwrite) and app_hyperkube
  output: Unexpected file accessed readwrite for hyperkube (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
  priority: WARNING

#
# Auto-generated set of falco rules for k8s_dns containers
# Generated at 2018-05-23 15:00:05 UTC
#

# By default, the autogenerated rules include rules that attempt to
# restrict the set of system calls that can be performed by
# applications. However, we know that these rules are fairly FP-prone,
# so they are disabled by default. If you'd like to enable them,
# either change or override this macro's condition to "evt.num >= 0".
- macro: k8s_dns_consider_syscalls
  condition: (evt.num < 0)

# These policies are limited to containers, specifically those where
# the container image name starts with "k8s_dns"
- macro: app_k8s_dns
  condition: container and container.image contains "k8s_dns"

# Considering any inbound network connection suspect
- rule: Unexpected inbound connection k8s_dns
  desc: Detect any inbound connection arriving at k8s_dns
  condition: inbound and evt.rawres >= 0 and app_k8s_dns
  output: Unexpected inbound connection arriving at k8s_dns (command=%proc.cmdline pid=%proc.pid connection=%fd.name user=%user.name %container.info image=%container.image)
  priority: WARNING

# Considering any outbound networking suspect
- rule: Unexpected outbound connection k8s_dns
  desc: Detect any outbound connection originating from k8s_dns
  condition: outbound and app_k8s_dns
  output: Unexpected outbound connection originating at k8s_dns (command=%proc.cmdline pid=%proc.pid connection=%fd.name user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting listening ports to selected set

- list: k8s_dns_allowed_inbound_ports_tcp
  items: [53]

- rule: Unexpected inbound tcp connection k8s_dns
  desc: Detect inbound traffic to k8s_dns using tcp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (k8s_dns_allowed_inbound_ports_tcp) and app_k8s_dns
  output: Inbound network connection to k8s_dns on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING
- list: k8s_dns_allowed_inbound_ports_udp
  items: [53]

- rule: Unexpected inbound udp connection k8s_dns
  desc: Detect inbound traffic to k8s_dns using udp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (k8s_dns_allowed_inbound_ports_udp) and app_k8s_dns
  output: Inbound network connection to k8s_dns on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting spawned processes to selected set

- list: k8s_dns_allowed_processes
  items: ["/dnsmasq-nanny", "/usr/sbin/dnsmasq", "dnsmasq"]

- rule: Unexpected spawned process k8s_dns
  desc: Detect a process started in a k8s_dns container outside of an expected set
  condition: spawned_process and not proc.name in (k8s_dns_allowed_processes) and app_k8s_dns
  output: Unexpected process spawned in k8s_dns container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting files read or written to specific set

- list: k8s_dns_allowed_file_prefixes_readonly
  items: ["/etc/k8s/dns"]

- rule: Unexpected file access readonly for k8s_dns
  desc: Detect an attempt to access a file readonly other than below an expected list of directories
  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (k8s_dns_allowed_file_prefixes_readonly) and app_k8s_dns
  output: Unexpected file accessed readonly for k8s_dns (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
  priority: WARNING

- list: k8s_dns_allowed_file_prefixes_readwrite
  items: ["/dev"]

- rule: Unexpected file access readwrite for k8s_dns
  desc: Detect an attempt to access a file readwrite other than below an expected list of directories
  condition: (open_write) and not fd.name pmatch (k8s_dns_allowed_file_prefixes_readwrite) and app_k8s_dns
  output: Unexpected file accessed readwrite for k8s_dns (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
  priority: WARNING
  
### GKE Falco Rules
- macro: defaultbackend_consider_syscalls
  condition: (evt.num < 0)

# These policies are limited to containers, specifically those where
# the container image name starts with "defaultbackend"
- macro: app_defaultbackend
  condition: container and container.image contains "defaultbackend"

# Not considering all inbound networking suspect

# Not considering all outbound networking suspect

# Restricting listening ports to selected set

- list: defaultbackend_allowed_inbound_ports_tcp
  items: [8080]

- rule: Unexpected inbound tcp connection defaultbackend
  desc: Detect inbound traffic to defaultbackend using tcp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (defaultbackend_allowed_inbound_ports_tcp) and app_defaultbackend
  output: Inbound network connection to defaultbackend on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting spawned processes to selected set

- list: defaultbackend_allowed_processes
  items: ["/server"]

- rule: Unexpected spawned process defaultbackend
  desc: Detect a process started in a defaultbackend container outside of an expected set
  condition: spawned_process and not proc.name in (defaultbackend_allowed_processes) and app_defaultbackend
  output: Unexpected process spawned in defaultbackend container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting files read or written to specific set

# Restricting syscalls to selected set

- list: defaultbackend_allowed_syscalls
  items: [accept]

- rule: Unexpected syscall defaultbackend
  desc: Detect a syscall in a defaultbackend container outside of an expected set
  condition: defaultbackend_consider_syscalls and not evt.type in ("<unknown>", defaultbackend_allowed_syscalls) and app_defaultbackend
  output: Unexpected syscall in defaultbackend container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)
  priority: WARNING
  warn_evttypes: False

#
# Auto-generated set of falco rules for event_exporter containers
# Generated at 2018-05-23 15:00:05 UTC
#

# By default, the autogenerated rules include rules that attempt to
# restrict the set of system calls that can be performed by
# applications. However, we know that these rules are fairly FP-prone,
# so they are disabled by default. If you'd like to enable them,
# either change or override this macro's condition to "evt.num >= 0".
- macro: event_exporter_consider_syscalls
  condition: (evt.num < 0)

# These policies are limited to containers, specifically those where
# the container image name starts with "event_exporter"
- macro: app_event_exporter
  condition: container and container.image startswith "event_exporter"

# Not considering all inbound networking suspect

# Not considering all outbound networking suspect

# Restricting listening ports to selected set

- list: event_exporter_allowed_inbound_ports_tcp
  items: [80]

- rule: Unexpected inbound tcp connection event_exporter
  desc: Detect inbound traffic to event_exporter using tcp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (event_exporter_allowed_inbound_ports_tcp) and app_event_exporter
  output: Inbound network connection to event_exporter on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting spawned processes to selected set

- list: event_exporter_allowed_processes
  items: ["/event-exporter"]

- rule: Unexpected spawned process event_exporter
  desc: Detect a process started in a event_exporter container outside of an expected set
  condition: spawned_process and not proc.name in (event_exporter_allowed_processes) and app_event_exporter
  output: Unexpected process spawned in event_exporter container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting files read or written to specific set

- list: event_exporter_allowed_file_prefixes_readonly
  items: ["/proc"]

- rule: Unexpected file access readonly for event_exporter
  desc: Detect an attempt to access a file readonly other than below an expected list of directories
  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (event_exporter_allowed_file_prefixes_readonly) and app_event_exporter
  output: Unexpected file accessed readonly for event_exporter (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
  priority: WARNING

#
# Auto-generated set of falco rules for hyperkube containers
# Generated at 2018-05-10 04:57:50 UTC
#

# By default, the autogenerated rules include rules that attempt to
# restrict the set of system calls that can be performed by
# applications. However, we know that these rules are fairly FP-prone,
# so they are disabled by default. If you'd like to enable them,
# either change or override this macro's condition to "evt.num >= 0".
- macro: hyperkube_consider_syscalls
  condition: (evt.num < 0)

# These policies are limited to containers, specifically those where
# the container image name starts with "hyperkube"
- macro: app_hyperkube
  condition: container and container.image contains "hyperkube"

# Not considering all inbound networking suspect

# Not considering all outbound networking suspect

# Restricting listening ports to selected set

- list: hyperkube_allowed_inbound_ports_tcp
  items: [10248, 10249, 10250, 10255, 4194, 443, 8080]

- rule: Unexpected inbound tcp connection hyperkube
  desc: Detect inbound traffic to hyperkube using tcp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (hyperkube_allowed_inbound_ports_tcp) and app_hyperkube
  output: Inbound network connection to hyperkube on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting spawned processes to selected set

- list: hyperkube_allowed_processes
  items: ["/bin/bash", "/bin/findmnt", "/hyperkube", "findmnt", "iptables", "iptables-restor", "iptables-restore", "iptables-save", "journalctl", "nsenter", "sleep"]

- rule: Unexpected spawned process hyperkube
  desc: Detect a process started in a hyperkube container outside of an expected set
  condition: spawned_process and not proc.name in (hyperkube_allowed_processes) and app_hyperkube
  output: Unexpected process spawned in hyperkube container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting files read or written to specific set

- list: hyperkube_allowed_file_prefixes_readonly
  items: ["/"]

- rule: Unexpected file access readonly for hyperkube
  desc: Detect an attempt to access a file readonly other than below an expected list of directories
  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (hyperkube_allowed_file_prefixes_readonly) and app_hyperkube
  output: Unexpected file accessed readonly for hyperkube (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
  priority: WARNING

- list: hyperkube_allowed_file_prefixes_readwrite
  items: ["/dev", "/proc", "/var/lib/kubelet/pods"]

- rule: Unexpected file access readwrite for hyperkube
  desc: Detect an attempt to access a file readwrite other than below an expected list of directories
  condition: (open_write) and not fd.name pmatch (hyperkube_allowed_file_prefixes_readwrite) and app_hyperkube
  output: Unexpected file accessed readwrite for hyperkube (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
  priority: WARNING

#
# Auto-generated set of falco rules for k8s_dns containers
# Generated at 2018-05-23 15:00:05 UTC
#

# By default, the autogenerated rules include rules that attempt to
# restrict the set of system calls that can be performed by
# applications. However, we know that these rules are fairly FP-prone,
# so they are disabled by default. If you'd like to enable them,
# either change or override this macro's condition to "evt.num >= 0".
- macro: k8s_dns_consider_syscalls
  condition: (evt.num < 0)

# These policies are limited to containers, specifically those where
# the container image name starts with "k8s_dns"
- macro: app_k8s_dns
  condition: container and container.image contains "k8s_dns"

# Considering any inbound network connection suspect
- rule: Unexpected inbound connection k8s_dns
  desc: Detect any inbound connection arriving at k8s_dns
  condition: inbound and evt.rawres >= 0 and app_k8s_dns
  output: Unexpected inbound connection arriving at k8s_dns (command=%proc.cmdline pid=%proc.pid connection=%fd.name user=%user.name %container.info image=%container.image)
  priority: WARNING

# Considering any outbound networking suspect
- rule: Unexpected outbound connection k8s_dns
  desc: Detect any outbound connection originating from k8s_dns
  condition: outbound and app_k8s_dns
  output: Unexpected outbound connection originating at k8s_dns (command=%proc.cmdline pid=%proc.pid connection=%fd.name user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting listening ports to selected set

- list: k8s_dns_allowed_inbound_ports_tcp
  items: [53]

- rule: Unexpected inbound tcp connection k8s_dns
  desc: Detect inbound traffic to k8s_dns using tcp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (k8s_dns_allowed_inbound_ports_tcp) and app_k8s_dns
  output: Inbound network connection to k8s_dns on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING
- list: k8s_dns_allowed_inbound_ports_udp
  items: [53]

- rule: Unexpected inbound udp connection k8s_dns
  desc: Detect inbound traffic to k8s_dns using udp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (k8s_dns_allowed_inbound_ports_udp) and app_k8s_dns
  output: Inbound network connection to k8s_dns on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting spawned processes to selected set

- list: k8s_dns_allowed_processes
  items: ["/dnsmasq-nanny", "/usr/sbin/dnsmasq", "dnsmasq"]

- rule: Unexpected spawned process k8s_dns
  desc: Detect a process started in a k8s_dns container outside of an expected set
  condition: spawned_process and not proc.name in (k8s_dns_allowed_processes) and app_k8s_dns
  output: Unexpected process spawned in k8s_dns container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: WARNING

# Restricting files read or written to specific set

- list: k8s_dns_allowed_file_prefixes_readonly
  items: ["/etc/k8s/dns"]

- rule: Unexpected file access readonly for k8s_dns
  desc: Detect an attempt to access a file readonly other than below an expected list of directories
  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (k8s_dns_allowed_file_prefixes_readonly) and app_k8s_dns
  output: Unexpected file accessed readonly for k8s_dns (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
  priority: WARNING

- list: k8s_dns_allowed_file_prefixes_readwrite
  items: ["/dev"]

- rule: Unexpected file access readwrite for k8s_dns
  desc: Detect an attempt to access a file readwrite other than below an expected list of directories
  condition: (open_write) and not fd.name pmatch (k8s_dns_allowed_file_prefixes_readwrite) and app_k8s_dns
  output: Unexpected file accessed readwrite for k8s_dns (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
  priority: WARNING

#### etcd Falco Rules

- macro: etcd_consider_syscalls
  condition: (evt.num < 0)

- macro: app_etcd
  condition: container and container.image contains "k8s_etcd"

# Not considering all inbound networking suspect

- list: etcd_outbound_processes
  items:
  - etcd

- rule: Unauthorized process opened an outbound connection (etcd)
  desc: A etcd process tried to open an outbound connection and is not whitelisted
  condition: outbound and not proc.name in (etcd_outbound_processes) and app_etcd
  output: Non-whitelisted process opened an outbound connection (command=%proc.cmdline
    connection=%fd.name)
  priority: WARNING

# Restricting listening ports to selected set

- list: etcd_allowed_inbound_ports_tcp
  items: [2380, 4001, 7001]

- rule: Unexpected inbound tcp connection etcd
  desc: Detect inbound traffic to etcd using tcp on a port outside of expected set
  condition: inbound and evt.rawres >= 0 and not fd.sport in (etcd_allowed_inbound_ports_tcp) and app_etcd
  output: Inbound network connection to etcd on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
  priority: NOTICE

# Restricting spawned processes to selected set

- list: etcd_allowed_processes
  items: ["/usr/local/bin/etcd"]

- rule: Unexpected spawned process etcd
  desc: Detect a process started in a etcd container outside of an expected set
  condition: spawned_process and not proc.name in (etcd_allowed_processes) and app_etcd
  output: Unexpected process spawned in etcd container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: NOTICE

# Restricting files read or written to specific set

- list: etcd_allowed_file_prefixes_readonly
  items: ["/proc/self", "/var/etcd/data/member"]

- rule: Unexpected file access readonly for etcd
  desc: Detect an attempt to access a file readonly other than below an expected list of directories
  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (etcd_allowed_file_prefixes_readonly) and app_etcd
  output: Unexpected file accessed readonly for etcd (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
  priority: NOTICE

- list: etcd_allowed_file_prefixes_readwrite
  items: ["/var/etcd/data/member"]

- rule: Unexpected file access readwrite for etcd
  desc: Detect an attempt to access a file readwrite other than below an expected list of directories
  condition: (open_write) and not fd.name pmatch (etcd_allowed_file_prefixes_readwrite) and app_etcd
  output: Unexpected file accessed readwrite for etcd (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
  priority: NOTICE

# Restricting syscalls to selected set

- list: etcd_allowed_syscalls
  items: [accept, openat, renameat, unlinkat]

- rule: Unexpected syscall etcd
  desc: Detect a syscall in a etcd container outside of an expected set
  condition: etcd_consider_syscalls and not evt.type in ("<unknown>", etcd_allowed_syscalls) and app_etcd
  output: Unexpected syscall in etcd container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)
  priority: NOTICE
  warn_evttypes: False
